// const getOneTransaction = (userAddress) => {

//   const result = {
//     users: [],
//     transactions: []
// };


//     userAddress = "9EcRGmpfGtKo6hu9dNhUdj248jmBjkaU5jYsbN65yEzm";

    
//     data.forEach(transaction => {
//       const inputs = transaction.inputs[0];
//       const outputs = transaction.outputs;

//       // Check if the user is involved in the transaction
//       if (inputs.owners_before.includes(userAddress) || outputs.some(output => output.public_keys.includes(userAddress))) {
//           // Add userAddress to the result.users array
//           if (!result.users.includes(userAddress)) {
//               result.users.push(userAddress);
//           }

//           // Add transaction to the result.transactions array
//           outputs.forEach(output => {
//               const from = inputs.owners_before[0];
//               const to = output.public_keys[0];
//               const amount = output.amount;

//               // Extract timestamp from metadata (if available)
//               const timestamp = transaction.metadata && transaction.metadata.timestamp ? transaction.metadata.timestamp : null;

//               result.transactions.push({ from, to, amount, timestamp });
//           });
//       }
//   });

//   return result;

// }



// Exclude From and To

// const getOneTransaction = (userAddress) => {

//     userAddress = "9EcRGmpfGtKo6hu9dNhUdj248jmBjkaU5jYsbN65yEzm";

//     const result = {
//       users: [userAddress],
//       transactions: []
//   };

//   data.forEach(transaction => {
//       const inputs = transaction.inputs[0];
//       const outputs = transaction.outputs;

//       // Check if the user is involved in the transaction
//       if (inputs.owners_before.includes(userAddress) || outputs.some(output => output.public_keys.includes(userAddress))) {
//           // Add transaction to the result.transactions array
//           outputs.forEach(output => {
//               const from = inputs.owners_before[0];
//               const to = output.public_keys[0];
//               const amount = output.amount;

//               // Exclude transactions where both from and to are the same
//               if (from !== to) {
//                   // Extract timestamp from metadata (if available)
//                   const timestamp = transaction.metadata && transaction.metadata.timestamp ? transaction.metadata.timestamp : null;

//                   result.transactions.push({ from, to, amount, timestamp });
//               }
//           });
//       }
//   });

//   return result;

// }



//Based on Transfer Operation Only

// const getOneTransaction = (transactionID) => {

//     userAddress = "9EcRGmpfGtKo6hu9dNhUdj248jmBjkaU5jYsbN65yEzm";

//     const result = {
//       users: [userAddress],
//       transactions: []
//   };

//   data.forEach(transaction => {
//       const inputs = transaction.inputs[0];
//       const outputs = transaction.outputs;

//       // Check if the transaction has a "TRANSFER" operation
//       if (transaction.operation === "TRANSFER") {
//           // Check if the user is involved in the transaction
//           if (inputs.owners_before.includes(userAddress) || outputs.some(output => output.public_keys.includes(userAddress))) {
//               // Add transaction to the result.transactions array
//               outputs.forEach(output => {
//                   const from = inputs.owners_before[0];
//                   const toCandidates = output.public_keys;
//                   const amount = output.amount;

//                   // Exclude transactions where both from and to are the same and the user is not involved
//                   if ((from !== userAddress || toCandidates.includes(userAddress)) && toCandidates.length > 0) {
//                       // Extract timestamp from metadata (if available)
//                       const timestamp = transaction.metadata && transaction.metadata.timestamp ? transaction.metadata.timestamp : null;

//                       // Only add the transaction if the user address is either in from or to
//                       if (from === userAddress || toCandidates.includes(userAddress)) {
//                           result.transactions.push({ from, to: userAddress, amount, timestamp });
//                       }
//                   }
//               });
//           }
//       }
//   });

//   return result;

// }